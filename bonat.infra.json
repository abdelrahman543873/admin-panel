{
  "Description": "Bonat Infra",
  "Parameters": {
    "EcsClusterName": {
      "Type": "String",
      "Default": "test-cluster",
      "Description": "the cluster name"
    },
    "RegionName": {
      "Type": "String",
      "Default": "us-west-2",
      "Description": "the cluster name"
    }
  },
  "Resources": {
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "Subnet1" }
      }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "InternetGateway" },
        "VpcId": { "Ref": "VPC" }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.0/25",
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "RegionName"
              },
              "c"
            ]
          ]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.128/25",
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "RegionName"
              },
              "b"
            ]
          ]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": -1,
            "FromPort": -1,
            "ToPort": -1,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": -1,
            "FromPort": -1,
            "ToPort": -1,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com",
                  "ec2.amazonaws.com",
                  "codebuild.amazonaws.com",
                  "codedeploy.amazonaws.com",
                  "codecommit.amazonaws.com",
                  "events.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "s3.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:*",
                    "logs:*",
                    "application-autoscaling:*",
                    "cloudformation:*",
                    "ec2:*",
                    "ecs:*",
                    "elasticloadbalancing:*",
                    "iam:*",
                    "logs:*",
                    "route53:*",
                    "servicediscovery:*",
                    "autoscaling:*",
                    "codebuild:*",
                    "codedeploy:*",
                    "cloudformation:*",
                    "codecommit:*",
                    "codepipeline:*",
                    "s3:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AdminBackendImagesRepository": {
      "DeletionPolicy": "Delete",
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "admin-backend-repository",
        "RepositoryPolicyText": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": "*",
              "Action": ["ecr:*"]
            }
          ]
        }
      }
    },
    "AdminBackendCodeCommitRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties": {
        "RepositoryName": "AdminBackendCodeCommitRepo",
        "RepositoryDescription": "This is the repository for backend"
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "DeletionPolicy": "Delete",
      "Properties": {
        "ClusterName": { "Ref": "EcsClusterName" },
        "CapacityProviders": ["FARGATE"],
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled"
          }
        ],
        "DefaultCapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1
          }
        ]
      }
    },
    "AdminBackendTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "TaskRoleArn": { "Ref": "RootRole" },
        "ExecutionRoleArn": { "Ref": "RootRole" },
        "Cpu": "512",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": ["FARGATE"],
        "ContainerDefinitions": [
          {
            "PortMappings": [
              {
                "ContainerPort": "3000",
                "HostPort": "3000"
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "firelens-container",
                "awslogs-region": { "Ref": "RegionName" },
                "awslogs-create-group": "true",
                "awslogs-stream-prefix": "firelens"
              }
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "AdminBackendImagesRepository",
                      "RepositoryUri"
                    ]
                  },
                  ":latest"
                ]
              ]
            },
            "Name": "admin-backend",
            "Memory": "1024",
            "Cpu": "512"
          }
        ]
      }
    },
    "AdminBackendService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["HTTPlistener", "AdminBackendListenerRole"],
      "Properties": {
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "Subnets": [{ "Ref": "Subnet1" }],
            "SecurityGroups": [{ "Ref": "InstanceSecurityGroup" }]
          }
        },
        "LaunchType": "FARGATE",
        "Cluster": { "Ref": "EcsClusterName" },
        "ServiceName": "admin-backend",
        "DesiredCount": 1,
        "TaskDefinition": { "Ref": "AdminBackendTask" },
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref": "AdminBackendTargetGroup"
            },
            "ContainerPort": "3000",
            "ContainerName": "admin-backend"
          }
        ]
      }
    },
    "AdminBackendTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "IpAddressType": "ipv4",
        "HealthCheckPort": "3000",
        "HealthCheckProtocol": "HTTP",
        "HealthyThresholdCount": "2",
        "HealthCheckIntervalSeconds": "5",
        "HealthCheckPath": "/backend/health",
        "Name": "admin-backend-target-group",
        "Port": "3000",
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": { "Ref": "VPC" }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType": "ipv4",
        "Name": "LoadBalancer",
        "Scheme": "internet-facing",
        "SecurityGroups": [{ "Ref": "InstanceSecurityGroup" }],
        "Subnets": [{ "Ref": "Subnet1" }, { "Ref": "Subnet2" }],
        "Type": "application"
      }
    },
    "AdminBackendListenerRole": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "AdminBackendTargetGroup" }
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": ["/backend/*"]
          }
        ],
        "ListenerArn": { "Ref": "HTTPlistener" },
        "Priority": 1
      }
    },
    "HTTPlistener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "DefaultActions": [
          {
            "Type": "fixed-response",
            "FixedResponseConfig": {
              "ContentType": "text/plain",
              "MessageBody": "invalid route",
              "StatusCode": "404"
            }
          }
        ],
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "SampleBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3Bucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["s3:*"],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": "*"
            }
          ]
        }
      }
    },
    "S3Bucket": {
      "DeletionPolicy": "Delete",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "bonat-frontend-5434",
        "WebsiteConfiguration": {
          "ErrorDocument": "index.html",
          "IndexDocument": "index.html"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET", "PUT", "HEAD", "POST", "DELETE"],
              "AllowedOrigins": ["*"]
            }
          ]
        }
      }
    },
    "CodeBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED"
          }
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Source": {
          "Type": "CODEPIPELINE",
          "BuildSpec": "backend/buildspec.yml"
        },
        "Environment": {
          "PrivilegedMode": "true",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "Type": "LINUX_CONTAINER",
          "EnvironmentVariables": [
            {
              "Name": "AWS_DEFAULT_REGION",
              "Value": { "Ref": "RegionName" }
            },
            {
              "Name": "REPOSITORY_URI",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "AdminBackendImagesRepository",
                        "RepositoryUri"
                      ]
                    }
                  ]
                ]
              }
            }
          ]
        },
        "Name": "BuildAdminBackend",
        "ServiceRole": { "Fn::GetAtt": ["RootRole", "Arn"] }
      }
    },
    "FrontendBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED"
          }
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Source": {
          "Type": "CODEPIPELINE",
          "BuildSpec": "frontend/frontendSpec.yml"
        },
        "Environment": {
          "PrivilegedMode": "true",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:4.0",
          "Type": "LINUX_CONTAINER",
          "EnvironmentVariables": [
            {
              "Name": "AWS_REGION",
              "Value": { "Ref": "RegionName" }
            },
            {
              "Name": "AWS_S3_BUCKET",
              "Value": { "Ref": "S3Bucket" }
            }
          ]
        },
        "Name": "BuildAdminFrontend",
        "ServiceRole": { "Fn::GetAtt": ["RootRole", "Arn"] }
      }
    },
    "AppPipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": { "Fn::GetAtt": ["RootRole", "Arn"] },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "source",
                "Configuration": {
                  "Owner": "Bonat-Org",
                  "Repo": "admin",
                  "Branch": "main",
                  "OAuthToken": "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",
                  "PollForSourceChanges": "false"
                },
                "RunOrder": 1,
                "ActionTypeId": {
                  "Version": "1",
                  "Provider": "GitHub",
                  "Category": "Source",
                  "Owner": "ThirdParty"
                },
                "OutputArtifacts": [{ "Name": "App" }]
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "build",
                "Configuration": {
                  "ProjectName": {
                    "Ref": "CodeBuildProject"
                  }
                },
                "RunOrder": 1,
                "ActionTypeId": {
                  "Version": "1",
                  "Provider": "CodeBuild",
                  "Category": "Build",
                  "Owner": "AWS"
                },
                "InputArtifacts": [{ "Name": "App" }],
                "OutputArtifacts": [{ "Name": "BuildOutput" }]
              }
            ]
          },
          {
            "Name": "DeployECS",
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "ECS",
                  "Version": "1"
                },
                "RunOrder": 2,
                "Name": "deployECS",
                "Configuration": {
                  "ClusterName": { "Ref": "EcsClusterName" },
                  "ServiceName": {
                    "Fn::GetAtt": ["AdminBackendService", "Name"]
                  }
                },
                "InputArtifacts": [{ "Name": "BuildOutput" }]
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": { "Ref": "S3Bucket" }
        }
      }
    },
    "FrontendPipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": { "Fn::GetAtt": ["RootRole", "Arn"] },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "source",
                "Configuration": {
                  "Owner": "Bonat-Org",
                  "Repo": "admin",
                  "Branch": "main",
                  "OAuthToken": "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",
                  "PollForSourceChanges": "false"
                },
                "RunOrder": 1,
                "ActionTypeId": {
                  "Version": "1",
                  "Provider": "GitHub",
                  "Category": "Source",
                  "Owner": "ThirdParty"
                },
                "OutputArtifacts": [{ "Name": "App" }]
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "build",
                "Configuration": {
                  "ProjectName": {
                    "Ref": "FrontendBuildProject"
                  }
                },
                "RunOrder": 1,
                "ActionTypeId": {
                  "Version": "1",
                  "Provider": "CodeBuild",
                  "Category": "Build",
                  "Owner": "AWS"
                },
                "InputArtifacts": [{ "Name": "App" }],
                "OutputArtifacts": [{ "Name": "BuildOutput" }]
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": { "Ref": "S3Bucket" }
        }
      }
    }
  }
}
